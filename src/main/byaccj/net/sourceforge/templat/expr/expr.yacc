// This file needs to be compiled with BYACC/J using the following command:
// yacc -J -Jclass=ExprParser -Jsemantic=Object -Jpackage=net.sourceforge.templat.expr -Jthrows="ExprLexingException, ExprParsingException, TemplateParsingException" -Jnorun -Jnoconstruct -Jnodebug expr.yacc

%{
import net.sourceforge.templat.parser.context.ContextStack;
import net.sourceforge.templat.exception.TemplateParsingException;
import net.sourceforge.templat.expr.exception.ExprLexingException;
import net.sourceforge.templat.expr.exception.ExprParsingException;



/**
 * Parses an expression. This java source file is generated by
 * BYACC/J from the expr.yacc grammar source file.
 */
%}


%token EOF
%token DOT
%token COMMA
%token NUM
%token ID
%token WS



%%


expression
	: '!' S expression { $$ = !(Boolean)$3; }
	| '(' S expression S ')' { $$ = $3; }
	| literal
	| name { $$ = helper.actions().applySelectors($1,helper.actions().createList()); }
	| name selectors { $$ = helper.actions().applySelectors($1,$2); }
	;

selectors
	: selectors selector { $$ = helper.actions().addToList($2,$1); }
	| selector { $$ = helper.actions().addToList($1,helper.actions().createList()); }
	;

selector
	: DOT identifier args { $$ = helper.actions().createMethodCall($2,$3); }
	| '[' S expression S ']' { $$ = helper.actions().createArraySubscript($3); }
	;

args
	: '(' S arg_list S ')' { $$ = $3; }
	;

arg_list
	: arg_list S COMMA S expression { $$ = helper.actions().addToList($5,$1); }
	| expression { $$ = helper.actions().addToList($1,helper.actions().createList()); }
	| /* empty */ { $$ = helper.actions().createList(); }
	;

name
	: name DOT identifier { $$ = $1+"."+$3; }
	| identifier
	;

identifier
	: ID
	;

literal
	: NUM
	;

S
	: WS
	| /* empty */
	;

%%


private final ExprParserHelper helper;

public ExprParser(final String input, final ContextStack stackContext)
{
    this.helper = new ExprParserHelper(input,stackContext);
}

public Object parse() throws ExprLexingException, ExprParsingException, TemplateParsingException
{
	return this.helper.parse(this);
}

private void yyerror(final String s) throws ExprParsingException
{
	this.helper.yyerror(s, this.yychar);
}

private int yylex() throws ExprLexingException
{
	return this.helper.yylex(this);
}
